CREATE TABLE `supplier` (
  `SUPP_ID` int unsigned NOT NULL AUTO_INCREMENT,
  `SUPP_NAME` varchar(50) NOT NULL,
  `SUPP_CITY` varchar(50) NOT NULL,
  `SUPP_PHONE` varchar(50) NOT NULL,
  PRIMARY KEY (`SUPP_ID`)
);

CREATE TABLE `customer` (
  `cust_id` int unsigned NOT NULL AUTO_INCREMENT,
  `cust_name` varchar(20) NOT NULL,
  `cust_phone` varchar(10) NOT NULL,
  `cust_city` varchar(30) NOT NULL,
  `cust_gender` enum('M','F') NOT NULL,
  PRIMARY KEY (`cust_id`)
);

CREATE TABLE `category` (
  `cat_id` int unsigned NOT NULL AUTO_INCREMENT,
  `cat_name` varchar(20) NOT NULL,
  PRIMARY KEY (`cat_id`)
);
CREATE TABLE `product` (
  `PRO_ID` int unsigned NOT NULL AUTO_INCREMENT,
  `PRO_NAME` varchar(20) NOT NULL,
  `PRO_DESC` varchar(60) DEFAULT NULL,
  `CAT_ID` int unsigned DEFAULT NULL,
  PRIMARY KEY (`PRO_ID`),
  KEY `CAT_ID` (`CAT_ID`),
  CONSTRAINT `product_ibfk_1` FOREIGN KEY (`CAT_ID`) REFERENCES `category` (`cat_id`)
);

CREATE TABLE `supplier_pricing` (
  `PRICING_ID` int unsigned NOT NULL AUTO_INCREMENT,
  `PRO_ID` int unsigned DEFAULT NULL,
  `SUPP_ID` int unsigned DEFAULT NULL,
  `SUPP_PRICE` int DEFAULT '0',
  PRIMARY KEY (`PRICING_ID`),
  KEY `PRO_ID` (`PRO_ID`),
  KEY `SUPP_ID` (`SUPP_ID`),
  CONSTRAINT `supplier_pricing_ibfk_1` FOREIGN KEY (`PRO_ID`) REFERENCES `product` (`PRO_ID`),
  CONSTRAINT `supplier_pricing_ibfk_2` FOREIGN KEY (`SUPP_ID`) REFERENCES `supplier` (`SUPP_ID`)
);
CREATE TABLE `orders` (
  `ORD_ID` int unsigned NOT NULL AUTO_INCREMENT,
  `ORD_AMOUNT` int NOT NULL,
  `ORD_DATE` date NOT NULL,
  `CUST_ID` int unsigned DEFAULT NULL,
  `PRICING_ID` int unsigned DEFAULT NULL,
  PRIMARY KEY (`ORD_ID`),
  KEY `CUST_ID` (`CUST_ID`),
  KEY `PRICING_ID` (`PRICING_ID`),
  CONSTRAINT `orders_ibfk_1` FOREIGN KEY (`CUST_ID`) REFERENCES `customer` (`cust_id`),
  CONSTRAINT `orders_ibfk_2` FOREIGN KEY (`PRICING_ID`) REFERENCES `supplier_pricing` (`PRICING_ID`)
);

CREATE TABLE `rating` (
  `RAT_ID` int unsigned NOT NULL AUTO_INCREMENT,
  `ORD_ID` int unsigned DEFAULT NULL,
  `RAT_RATSTARTS` int NOT NULL,
  PRIMARY KEY (`RAT_ID`),
  KEY `ORD_ID` (`ORD_ID`),
  CONSTRAINT `rating_ibfk_1` FOREIGN KEY (`ORD_ID`) REFERENCES `orders` (`ORD_ID`)
);
INSERT INTO supplier VALUES (1,'Rajesh Retails','Delhi','1234567890'),
(2,'Appario Ltd.','Mumbai','2589631470'),(3,'Knome products','Banglore','9785462315'),
(4,'Bansal Retails','Kochi','8975463285'),(5,'Mittal Ltd.','Lucknow','7898456532');

INSERT INTO customer VALUES (1,'AAKASH','9999999999','DELHI','M'),(2,'AMAN','9785463215','NOIDA','M'),
(3,'NEHA','9999999999','MUMBAI','F'),(4,'MEGHA','9994562399','KOLKATA','F'),
(5,'PULKIT','7895999999','LUCKNOW','M');

INSERT INTO category VALUES (1,'BOOKS'),(2,'GAMES'),(3,'GROCERIES'),(4,'ELECTRONICS'),(5,'Clothes');

INSERT INTO product VALUES (14,'GTA V','Windows 7 and above with i5 processor and 8GB RAM',2),
(15,'TSHIRT','SIZE-L with Black, Blue and White variations',5),
(16,'ROG LAPTOP	','Windows 10 with 15inch screen, i7 processor, 1TB SSD',4),
(17,'OATS','Highly Nutritious from Nestle',3),
(18,'HARRY POTTER','Best Collection of all time by J.K Rowling',1),
(19,'MILK','1L Toned Milk',3),(20,'Boat Earphones','1.5Meter long Dolby Atmos',4),
(21,'Jeans','Stretchable Denim Jeans with various sizes and color',5),
(22,'Project IGI','compatible with windows 7 and above',2),
(23,'Hoodie','Black GUCCI for 13 yrs and above',5),
(24,'Rich Dad Poor Dad','Written by RObert Kiyosaki',1),(25,'Train Your Brain','By Shireen Stephen',1);

INSERT INTO supplier_pricing VALUES (11,14,2,1500),(12,16,5,30000),(13,18,1,3000),(14,15,3,2500),
(15,17,1,1000);

INSERT INTO orders VALUES (101,1500,'2021-10-06',2,11),(102,1000,'2021-10-12',3,15),
(103,30000,'2021-09-16',5,12),(104,1500,'2021-10-05',1,11),(105,3000,'2021-08-16',4,13),
(106,1450,'2021-08-18',1,14),(107,789,'2021-09-01',3,12),(108,780,'2021-09-07',5,11),
(109,3000,'2021-01-10',5,13),(110,2500,'2021-09-10',2,14),(111,1000,'2021-09-15',4,15),
(112,789,'2021-09-16',4,12),(113,31000,'2021-09-16',1,13),(114,1000,'2021-09-16',3,15),
(115,3000,'2021-09-16',5,13),(116,99,'2021-09-17',2,14);

INSERT INTO rating VALUES (1,101,4),(2,102,3),(3,103,1),(4,104,2),(5,105,4),(6,106,3),
(7,107,4),(8,108,4),(9,109,3),(10,110,5),(11,111,3),(12,112,4),(13,113,2),(14,114,1),
(15,115,1),(16,116,0);
3)	Display the total number of customers based on gender who have placed individual orders of worth at least Rs.3000

SELECT cust_gender, COUNT(DISTINCT customer.cust_id) as TotalCustomers
FROM customer
JOIN orders ON customer.cust_id = orders.cust_id
WHERE orders.ORD_AMOUNT >= 3000
GROUP BY cust_gender;

4) Display all the orders along with product name ordered by a customer having Customer_Id=2

select cust_name, cust_city, o.ORD_AMOUNT, o.pricing_id, s.PRO_ID, p.PRO_NAME, p.PRO_DESC
   from customer inner join orders as o 
     on customer.cust_id=o.CUST_ID 
     inner join supplier_pricing as s
       on o.PRICING_ID = s.PRICING_ID
     inner join product as p
       on s.PRO_ID=p.PRO_ID
     and customer.cust_id=2;


5) Display the Supplier details who can supply more than one product.

select s.supp_name, count(p.PRO_NAME) as num_of_products from supplier as s 
    inner join supplier_pricing as sp on s.SUPP_ID=sp.SUPP_ID
        inner join product as p on sp.PRO_ID=p.PRO_ID
        group by s.SUPP_NAME
        having num_of_products > 1;

6) Find the least expensive product from each category and print the table with category id, name,
 product name and price of the product.

 SELECT c.cat_id, c.cat_name, p.PRO_NAME, sp.SUPP_PRICE
FROM Category c
JOIN product p ON c.cat_id = p.CAT_ID
JOIN supplier_pricing sp ON p.PRO_ID = sp.PRO_ID
JOIN (
    SELECT p.CAT_ID, MIN(sp.SUPP_PRICE) AS min_price
    FROM product p
    JOIN supplier_pricing sp ON p.PRO_ID = sp.PRO_ID
    GROUP BY p.CAT_ID
) t ON p.CAT_ID = t.CAT_ID AND sp.SUPP_PRICE = t.min_price;
7) Display the Id and Name of the Product ordered after “2021-10-05”. 

select c.cust_name, o.ord_amount, o.ord_date, p.pro_name, p.PRO_DESC  from orders as o
 inner join supplier_pricing as sp 
         on o.PRICING_ID=sp.PRICING_ID
     inner join product as p on sp.pro_id=p.PRO_ID   
     inner join customer as c
       on o.CUST_ID=c.cust_id
    where o.ORD_DATE > "2021-10-05"; 


8)	Display customer name and gender whose names start or end with character 'A'.

  select customer.cust_name,customer.cust_gender from customer where customer.cust_name 
  like 'A%' or customer.cust_name like '%A'; 
      

9) Create a stored procedure to display supplier id, name, rating and Type_of_Service. 
  For Type_of_Service, If rating =5, print “Excellent Service”,If rating >4 print “Good Service”, 
  If rating >2 print “Average Service” else print “Poor Service”.  

  DELIMITER //

CREATE PROCEDURE GetSupplierInfo()
BEGIN
    SELECT s.SUPP_ID, s.SUPP_NAME, r.RAT_RATSTARTS,
        CASE
            WHEN r.RAT_RATSTARTS = 5 THEN 'Excellent Service'
            WHEN r.RAT_RATSTARTS > 4 THEN 'Good Service'
            WHEN r.RAT_RATSTARTS > 2 THEN 'Average Service'
            ELSE 'Poor Service'
        END AS Type_of_Service
    FROM supplier s
    JOIN supplier_pricing sp ON s.SUPP_ID = sp.SUPP_ID
    JOIN orders o ON sp.PRICING_ID = o.PRICING_ID
    JOIN rating r ON o.ORD_ID = r.ORD_ID;
END //

DELIMITER ;

   call ecommerce.GetSupplierInfo();



